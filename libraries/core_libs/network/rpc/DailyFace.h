/**
 * This file is generated by jsonrpcstub, DO NOT CHANGE IT MANUALLY!
 */

#ifndef JSONRPC_CPP_STUB_DAILY_NET_DAILYFACE_H_
#define JSONRPC_CPP_STUB_DAILY_NET_DAILYFACE_H_

#include <libweb3jsonrpc/ModularServer.h>

namespace daily {
namespace net {
class DailyFace : public ServerInterface<DailyFace> {
 public:
  static constexpr int JSON_ANY = 0;

  DailyFace() {
    this->bindAndAddMethod(
        jsonrpc::Procedure("daily_protocolVersion", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_STRING, NULL),
        &daily::net::DailyFace::daily_protocolVersionI);
    this->bindAndAddMethod(
        jsonrpc::Procedure("daily_getVersion", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_OBJECT, NULL),
        &daily::net::DailyFace::daily_getVersionI);
    this->bindAndAddMethod(
        jsonrpc::Procedure("daily_getDagBlockByHash", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_OBJECT, "param1",
                           jsonrpc::JSON_STRING, "param2", jsonrpc::JSON_BOOLEAN, NULL),
        &daily::net::DailyFace::daily_getDagBlockByHashI);
    this->bindAndAddMethod(
        jsonrpc::Procedure("daily_getDagBlockByLevel", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_OBJECT, "param1",
                           jsonrpc::JSON_STRING, "param2", jsonrpc::JSON_BOOLEAN, NULL),
        &daily::net::DailyFace::daily_getDagBlockByLevelI);
    this->bindAndAddMethod(
        jsonrpc::Procedure("daily_dagBlockLevel", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_STRING, NULL),
        &daily::net::DailyFace::daily_dagBlockLevelI);
    this->bindAndAddMethod(
        jsonrpc::Procedure("daily_dagBlockPeriod", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_STRING, NULL),
        &daily::net::DailyFace::daily_dagBlockPeriodI);
    this->bindAndAddMethod(jsonrpc::Procedure("daily_getScheduleBlockByPeriod", jsonrpc::PARAMS_BY_POSITION,
                                              jsonrpc::JSON_OBJECT, "param1", jsonrpc::JSON_STRING, NULL),
                           &daily::net::DailyFace::daily_getScheduleBlockByPeriodI);
    this->bindAndAddMethod(
        jsonrpc::Procedure("daily_getNodeVersions", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_OBJECT, NULL),
        &daily::net::DailyFace::daily_getNodeVersionsI);
    this->bindAndAddMethod(
        jsonrpc::Procedure("daily_getConfig", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_OBJECT, NULL),
        &daily::net::DailyFace::daily_getConfigI);
    this->bindAndAddMethod(
        jsonrpc::Procedure("daily_getChainStats", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_OBJECT, NULL),
        &daily::net::DailyFace::daily_getChainStatsI);
    this->bindAndAddMethod(jsonrpc::Procedure("daily_pbftBlockHashByPeriod", jsonrpc::PARAMS_BY_POSITION,
                                              jsonrpc::JSON_STRING, "param1", jsonrpc::JSON_STRING, NULL),
                           &daily::net::DailyFace::daily_pbftBlockHashByPeriodI);
    this->bindAndAddMethod(
        jsonrpc::Procedure("daily_yield", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_STRING, "param1", JSON_ANY, NULL),
        &daily::net::DailyFace::daily_yieldI);
    this->bindAndAddMethod(jsonrpc::Procedure("daily_totalSupply", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_STRING,
                                              "param1", JSON_ANY, NULL),
                           &daily::net::DailyFace::daily_totalSupplyI);
    this->bindAndAddMethod(
        jsonrpc::Procedure("daily_getPillarBlockData", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_OBJECT, "param1",
                           JSON_ANY, "param2", jsonrpc::JSON_BOOLEAN, NULL),
        &daily::net::DailyFace::daily_getPillarBlockDataI);
  }

  inline virtual void daily_protocolVersionI(const Json::Value &request, Json::Value &response) {
    (void)request;
    response = this->daily_protocolVersion();
  }
  inline virtual void daily_getVersionI(const Json::Value &request, Json::Value &response) {
    (void)request;
    response = this->daily_getVersion();
  }
  inline virtual void daily_getDagBlockByHashI(const Json::Value &request, Json::Value &response) {
    response = this->daily_getDagBlockByHash(request[0u].asString(), request[1u].asBool());
  }
  inline virtual void daily_getDagBlockByLevelI(const Json::Value &request, Json::Value &response) {
    response = this->daily_getDagBlockByLevel(request[0u].asString(), request[1u].asBool());
  }
  inline virtual void daily_dagBlockLevelI(const Json::Value &request, Json::Value &response) {
    (void)request;
    response = this->daily_dagBlockLevel();
  }
  inline virtual void daily_dagBlockPeriodI(const Json::Value &request, Json::Value &response) {
    (void)request;
    response = this->daily_dagBlockPeriod();
  }
  inline virtual void daily_getScheduleBlockByPeriodI(const Json::Value &request, Json::Value &response) {
    response = this->daily_getScheduleBlockByPeriod(request[0u].asString());
  }
  inline virtual void daily_getNodeVersionsI(const Json::Value &request, Json::Value &response) {
    (void)request;
    response = this->daily_getNodeVersions();
  }
  inline virtual void daily_getConfigI(const Json::Value &request, Json::Value &response) {
    (void)request;
    response = this->daily_getConfig();
  }
  inline virtual void daily_getChainStatsI(const Json::Value &request, Json::Value &response) {
    (void)request;
    response = this->daily_getChainStats();
  }
  inline virtual void daily_pbftBlockHashByPeriodI(const Json::Value &request, Json::Value &response) {
    response = this->daily_pbftBlockHashByPeriod(request[0u].asString());
  }
  inline virtual void daily_yieldI(const Json::Value &request, Json::Value &response) {
    (void)request;
    response = this->daily_yield(request[0u].asString());
  }
  inline virtual void daily_totalSupplyI(const Json::Value &request, Json::Value &response) {
    (void)request;
    response = this->daily_totalSupply(request[0u].asString());
  }
  inline virtual void daily_getPillarBlockDataI(const Json::Value &request, Json::Value &response) {
    (void)request;
    response = this->daily_getPillarBlockData(request[0u].asString(), request[1u].asBool());
  }

  virtual std::string daily_protocolVersion() = 0;
  virtual Json::Value daily_getVersion() = 0;
  virtual Json::Value daily_getDagBlockByHash(const std::string &param1, bool param2) = 0;
  virtual Json::Value daily_getDagBlockByLevel(const std::string &param1, bool param2) = 0;
  virtual std::string daily_dagBlockLevel() = 0;
  virtual std::string daily_dagBlockPeriod() = 0;
  virtual Json::Value daily_getScheduleBlockByPeriod(const std::string &param1) = 0;
  virtual Json::Value daily_getNodeVersions() = 0;
  virtual Json::Value daily_getConfig() = 0;
  virtual Json::Value daily_getChainStats() = 0;
  virtual std::string daily_pbftBlockHashByPeriod(const std::string &param1) = 0;
  virtual std::string daily_yield(const std::string &param1) = 0;
  virtual std::string daily_totalSupply(const std::string &param1) = 0;
  virtual Json::Value daily_getPillarBlockData(const std::string &param1, bool param2) = 0;
};

}  // namespace net
}  // namespace daily
#endif  // JSONRPC_CPP_STUB_DAILY_NET_DAILYFACE_H_
